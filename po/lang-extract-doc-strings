#!/usr/bin/env python
#
# lang-extract-doc-strings
#
# Extract all translatable strings from docs into a pot file
#
# Copyright (C) 2016 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU GPLv2
#
# Tool to convert res/locales/en/lang.lua file to its corresponding lang.po file
# in a given locale and language. The lang.po file will be empty and ready to be
# given to translators.
#
# Dependencies:
#
#   1. python module: polib
#   pip install polib
#
#   2. python module: docopt
#   pip install docopt


"""
Usage:
  lang-extract-strings

Options:
  -h, --help       show this message
"""


import os
import sys
import json
import datetime

import polib
import docopt

CURRENT_DIR = os.path.dirname(os.path.realpath(__file__))

# constants
HEADER = '''Messages for make-art.
Copyright (C) {} Kano Computing Ltd.
This file is distributed under the same license as the make-art package.
 <dev@kano.me>, {}
'''
LOCALES_DIR = os.path.join(CURRENT_DIR, '../locales')
DOCS_FILENAME = os.path.join(CURRENT_DIR, '../content/docs.json')
POT_FILENAME = os.path.join(LOCALES_DIR, 'messages-docs.pot')
DEFAULT_LOCALE = 'en'


def extract_strings(docs_data):
    types = docs_data[DEFAULT_LOCALE]
    strings = []

    for index, _type in enumerate(types):
        if 'label' in _type:
            strings.append((
                _type['label'],
                'en[{}]'.format(index),
            ))

        for command_index, command in enumerate(_type['commands']):
            if 'description' in command:
                strings.append((
                    command['description'],
                    'en[{}].commands[{}]'.format(index, command_index),
                ))

            for args_index, arg in enumerate(command['args']):
                strings.append((
                    arg[2],
                    'en[{}].commands[{}].args[{}]'.format(index, command_index, args_index),
                ))

    return strings


def main(args):
    date = datetime.date.today()

    # convert the json to a pot file
    new_po_file = polib.POFile(check_for_duplicates=True)
    new_po_file.metadata = {
        'Project-Id-Version': '1.0',
        'Report-Msgid-Bugs-To': 'dev@kano.me',
        'POT-Creation-Date': '{} 14:00+0100'.format(date),
        'PO-Revision-Date': '{} 14:00+0100'.format(date),
        'Last-Translator': '<dev@kano.me>',
        'Language-Team': '<dev@kano.me>',
        'Language': '',
        'MIME-Version': '1.0',
        'Content-Type': 'text/plain; charset=utf-8',
        'Content-Transfer-Encoding': '8bit',
    }
    new_po_file.header = HEADER.format(date.year, date.year)

    # Get all strings
    with open(DOCS_FILENAME) as json_data_file:
        json_data = json.load(json_data_file)

    doc_strings = extract_strings(json_data)

    for string, location in doc_strings:
        entry = polib.POEntry(
            msgid=string,
            msgstr=u'',
            occurrences=[(location, 0)]
        )
        try:
            new_po_file.append(entry)
        except ValueError:
            # string already exists
            existing_entry = new_po_file.find(string)
            existing_entry.occurrences.append((location, 0))

    # write the po file
    new_po_file.save(POT_FILENAME)


if __name__ == '__main__':
    args = docopt.docopt(__doc__)
    sys.exit(main(args))
